{"componentChunkName":"component---src-templates-question-js","path":"/async-await/","result":{"data":{"site":{"siteMetadata":{"title":"1977 JavaScript Quizzes","author":"duthaho"}},"markdownRemark":{"id":"19082f25-983c-5691-8d83-312bbb16932d","excerpt":"Consider the following async function and its output, what will be displayed to the console when\ncalling the  function? The function execution \"pauses\" at the…","html":"<p>Consider the following async function and its output, what will be displayed to the console when\ncalling the <code class=\"language-text\">f()</code> function?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">'first!'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> promise<span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!-- explanation -->\n<p>The function execution \"pauses\" at the line <code class=\"language-text\">await promise</code> and resumes when the promise settles,\nwith result becoming its result. So the code above shows \"done!\" after one second.</p>\n<p>Let’s emphasize: <code class=\"language-text\">await</code> literally makes JavaScript wait until the promise settles, and then go on\nwith the result. That doesn’t cost any CPU resources, because the engine can do other jobs\nmeanwhile: execute other scripts, handle events etc.</p>\n<p>It’s just a more elegant syntax of getting the promise result than <code class=\"language-text\">promise.then</code>,\neasier to read and write.</p>","frontmatter":{"title":"Async/Await","answers":["first!","done! // correct","JavaScript error","Something else"],"date":"Mon Oct 07 2019 09:40:20 GMT-0700 (Mountain Standard Time)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/async-await/","previous":{"fields":{"slug":"/curly-q/"},"frontmatter":{"title":"Curly Q","date":"2019-10-06"}},"next":{"fields":{"slug":"/arrow-functions/"},"frontmatter":{"title":"Arrow Functions","date":"Mon Oct 07 2019 16:26:43 GMT+0530 (India Standard Time)"}}}}}