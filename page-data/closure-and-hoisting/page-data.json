{"componentChunkName":"component---src-templates-question-js","path":"/closure-and-hoisting/","result":{"data":{"site":{"siteMetadata":{"title":"1977 JavaScript Quizzes","author":"duthaho"}},"markdownRemark":{"id":"d0596322-62de-5033-b4d2-81e1f21230d1","excerpt":"What would be the output of the following three s. Definition: \"Closure\" is said to occur when a function remembers and accesses its lexical scope, even when itâ€¦","html":"<p>What would be the output of the following three <code class=\"language-text\">console.log</code>s.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">withVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">withLet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">changingValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">withVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// ??</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">withLet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// ??</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">changingValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// ??</span></code></pre></div>\n<!-- explanation -->\n<p>Definition: \"Closure\" is said to occur when a function remembers and accesses its lexical scope, even when it is executed outside of that scope. <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20%26%20closures/ch5.md\">Definition by Kyle Simpson in YDKJS</a>.</p>\n<p>When the internal functions <code class=\"language-text\">b</code> are returned from all the three functions, each function <code class=\"language-text\">b</code> gets a \"closure\" over the value of <code class=\"language-text\">a</code> defined in its parent function's scope. However, the value of <code class=\"language-text\">a</code> closed over by <code class=\"language-text\">b</code> in all cases is the \"latest\" value of <code class=\"language-text\">a</code>, or in other words, <code class=\"language-text\">b</code> has closure over the variable <code class=\"language-text\">a</code> itself, not its value. Hence, even when the value of <code class=\"language-text\">a</code> is changed, <code class=\"language-text\">b</code> always has the most recent value assigned to <code class=\"language-text\">a</code>.</p>\n<p>That is why, in <code class=\"language-text\">withVar</code>, even though <code class=\"language-text\">a</code> is undefined when <code class=\"language-text\">b</code> is first defined, however, by the time <code class=\"language-text\">b</code> is executed (inside the <code class=\"language-text\">console.log</code>), the value of <code class=\"language-text\">a</code> has been updated to <code class=\"language-text\">24</code>, and that is what is returned by <code class=\"language-text\">b</code> . Similarly, in <code class=\"language-text\">withLet</code>, there is no more \"Temporal Dead Zone\" for <code class=\"language-text\">a</code> by the time <code class=\"language-text\">b</code> is executed. And finally, the \"updated\" value of <code class=\"language-text\">a</code> is returned by <code class=\"language-text\">changingValue</code>.</p>\n<p>This example also demonstrates that the code inside a JS function does not \"run\" till the function is actually invoked (by using the parens, like <code class=\"language-text\">withVar()</code>). That is why, in <code class=\"language-text\">withVar</code> and <code class=\"language-text\">withLet</code>, even though function <code class=\"language-text\">b</code> returns <code class=\"language-text\">a</code>, which at that line is not declared at all. But the code actually only runs when <code class=\"language-text\">b</code> is invoked in their respective <code class=\"language-text\">console.log</code>s.</p>","frontmatter":{"title":"Closure and Hoisting","answers":["undefined ERROR 42","24 ERROR 24","24 24 42 // correct","undefined ERROR 24","24 Error 42"],"date":"Mon Oct 21 2019 22:49:13 GMT-0600 (Mountain Daylight Time)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/closure-and-hoisting/","previous":{"fields":{"slug":"/implicit-semicolon/"},"frontmatter":{"title":"Implicit semicolon insertion","date":"Thu Oct 24 2019 16:09:25 GMT+0200 (Central European Summer Time)"}},"next":{"fields":{"slug":"/array-method-callbacks/"},"frontmatter":{"title":"Array Method Callbacks","date":"Sun Oct 20 2019 15:26:39 GMT-0700 (Pacific Daylight Time)"}}}}}