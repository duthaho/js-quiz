{"componentChunkName":"component---src-templates-question-js","path":"/curly-q/","result":{"data":{"site":{"siteMetadata":{"title":"1977 JavaScript Quizzes","author":"duthaho"}},"markdownRemark":{"id":"7b7bb2aa-8d00-5169-a703-6b0dcd6d68f1","excerpt":"What will the  and  functions return when logged to the console together? Although the  and  functions above look almost identical,  returns\n. This is becauseâ€¦","html":"<p>What will the <code class=\"language-text\">foo()</code> and <code class=\"language-text\">bar()</code> functions return when logged to the console together?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">{</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bar\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- explanation -->\n<p>Although the <code class=\"language-text\">foo()</code> and <code class=\"language-text\">bar()</code> functions above look almost identical, <code class=\"language-text\">bar()</code> returns\n<code class=\"language-text\">undefined</code>. This is because JavaScript automatically inserts semicolons after\ncertain statements, including <code class=\"language-text\">return</code> statements.</p>\n<p>Let's look at both functions and see where JavaScript inserts semicolons:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hmm...the return statement is followed immediately by a curly brace on the same\nline, so JavaScript only adds semicolons after the closing curly braces in <code class=\"language-text\">foo()</code>, like\nso:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, <code class=\"language-text\">bar()</code> is a little different.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">{</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bar\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note how the curly brace after <code class=\"language-text\">return</code> occurs on the following line. When\n<code class=\"language-text\">bar()</code> is run, JavaScript\nautomatically places a semicolon after <code class=\"language-text\">return</code>, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">{</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bar\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It's essentially the same as running this function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">bar</code> thus returns <code class=\"language-text\">undefined</code> because (according to JavaScript) it contains no\ninner values when run. This is a good reason to be careful about where you place\nbrackets!</p>\n<p>(For a quick overview on\nJavaScript's automatic semicolon insertion, <a\nhref=\"https://flaviocopes.com/javascript-automatic-semicolon-insertion/\">check\nout this article</a> by Flavio Copes.)</p>","frontmatter":{"title":"Curly Q","answers":["{ foo: \"foo\" } undefined // correct","undefined { bar: \"bar\" }","undefined undefined"],"date":"2019-10-06"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/curly-q/","previous":{"fields":{"slug":"/floating-point-precision/"},"frontmatter":{"title":"Floating-Point Precision","date":"2019-10-07"}},"next":{"fields":{"slug":"/async-await/"},"frontmatter":{"title":"Async/Await","date":"Mon Oct 07 2019 09:40:20 GMT-0700 (Mountain Standard Time)"}}}}}